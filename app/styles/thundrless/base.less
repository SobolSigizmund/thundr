/*
 * Atomic Style Library
 * 
 * Version: 0.2
 * Download: 
 * Copyright 2012, Atomic Leopard - www.atomicleopard.com
 * License: GNU LESSER GENERAL PUBLIC LICENSE Version 3 - http://www.gnu.org/licenses/lgpl-3.0.html 
 *
 * This library defines a set of useful style resources for use in fast generation
 * of well layed out semantic HTML.
 * By leveraging LESS mixins rather than class name composition in html, we
 * can gain the advantages of aggregate styles without sacrificing semantic html.
 */
 
 /**
 * Inline block
 * Status: FF+, Webkit+, IE7-, IE8-, IE9-, IE10-, Opera-
 */ 
.inline-block() {
	display: -moz-inline-stack;
	display: inline-block;
	vertical-align: top;
	letter-spacing: normal;
    word-spacing: normal;
    *zoom: 1;
	*display: inline;
}

/**
* Ah - the good old clear. This is not a mixin because of the
* prolific use of the clear class on most webpages.
*/
.clear {
	zoom:1; /* For IE 6/7 (trigger hasLayout) */
	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}

/** 
* Mixins for horizontal and vertical paddings and margin pairs.
*/
.marginH(@value){
	margin-left: @value;
	margin-right: @value;	
}
.marginV(@value){
	margin-top: @value;
	margin-bottom: @value;	
}
.paddingH(@value){
	padding-left: @value;
	padding-right: @value;	
}
.paddingV(@value){
	padding-top: @value;
	padding-bottom: @value;	
}

/**
* Controls what the user may select (i.e. highlight and copy)
* Status: FF+, Webkit+, IE7?, IE8?, IE9?, IE10?, Opera?
* Options:
* none
*/
.user-select(@policy){
	-webkit-user-select: @policy;
	-khtml-user-select: @policy;
	-moz-user-select: @policy;
	-ms-user-select: @policy;
	-o-user-select: @policy;
	user-select: @policy;
}

.transform(@transformation){
	-webkit-transform: @transformation;
	-moz-transform: @transformation;
	-ms-transform: @transformation;
	-o-transform: @transformation;
	transform: @transformation;
}
.rotate(@degrees) {
	.transform(rotate(@degrees));
}
.scale(@ratio) {
	.transform(scale(@ratio));
}
.translate(@x, @y) {
	.transform(translate(@x, @y));
}
.translate(@x, @y, @z) {
	.transform(translate(@x, @y, @z));
}
.skew(@x, @y) {
	.transform(skew(@x, @y));
}
.transform-origin(@transformation){
	-webkit-transform-origin: @transformation;
	   -moz-transform-origin: @transformation;
	    -ms-transform-origin: @transformation;
	     -o-transform-origin: @transformation;
	        transform-origin: @transformation;
}
.transition(@transition) {
  -webkit-transition: @transition;
     -moz-transition: @transition;
      -ms-transition: @transition;
       -o-transition: @transition;
          transition: @transition;
}
/**
* Sets the box model of an element - whether to include padding
* and borders in the width calculation or not
* Status: FF+, Webkit+, IE7-, IE8+, IE9+, IE10+, Opera+
* 
* Options: 	content-box (default), border-box
* Info: 	http://www.css3.info/preview/box-sizing/
* Support: 	http://caniuse.com/#search=box-sizing  
*/
.box-sizing(@boxmodel) {
  -webkit-box-sizing: @boxmodel;
     -moz-box-sizing: @boxmodel;
      -ms-box-sizing: @boxmodel;
          box-sizing: @boxmodel;
}
.border-radius(@radius){
	-webkit-border-radius: @radius;
	-moz-border-radius: @radius;
	border-radius: @radius;
}
.border-top-radius(@radius){
	.border-top-right-radius(@radius);
	.border-top-left-radius(@radius);
}
.border-bottom-radius(@radius){
	.border-bottom-right-radius(@radius);
	.border-bottom-left-radius(@radius);
}
.border-left-radius(@radius){
	.border-top-left-radius(@radius);
	.border-bottom-left-radius(@radius);
}
.border-right-radius(@radius){
	.border-top-right-radius(@radius);
	.border-bottom-right-radius(@radius);
}
.border-bottom-radius(@radius){
	.border-bottom-right-radius(@radius);
	.border-bottom-left-radius(@radius);
}
.border-top-right-radius(@radius){
	-webkit-border-top-right-radius: @radius;
	 -khtml-border-radius-topright: @radius;
	   -moz-border-radius-topright: @radius;
	        border-top-right-radius: @radius;
}
.border-top-left-radius(@radius){
	-webkit-border-top-left-radius: @radius;
	  -khtml-border-radius-topleft: @radius;
	    -moz-border-radius-topleft: @radius;
	        border-top-left-radius: @radius;
}
.border-bottom-left-radius(@radius){
	-webkit-border-bottom-left-radius: @radius;
	  -khtml-border-radius-bottomleft: @radius;
	    -moz-border-radius-bottomleft: @radius;
	         border-bottom-left-radius: @radius;
}
.border-bottom-right-radius(@radius){
	-webkit-border-bottom-right-radius: @radius;
	  -khtml-border-radius-bottomright: @radius;
	    -moz-border-radius-bottomright: @radius;
	        border-bottom-right-radius: @radius;
}
.box-shadow(@shadow1) {
	-webkit-box-shadow: @shadow1; 
	   -moz-box-shadow: @shadow1;
	        box-shadow: @shadow1;
}
.box-shadow(@shadow1, @shadow2) {
	-webkit-box-shadow: @shadow1, @shadow2; 
	   -moz-box-shadow: @shadow1, @shadow2;
	        box-shadow: @shadow1, @shadow2;
}
.box-shadow(@shadow1, @shadow2, @shadow3) {
	-webkit-box-shadow: @shadow1, @shadow2, @shadow3; 
	   -moz-box-shadow: @shadow1, @shadow2, @shadow3;
	        box-shadow: @shadow1, @shadow2, @shadow3;
}
.box-shadow(@shadow1, @shadow2, @shadow3, @shadow4) {
	-webkit-box-shadow: @shadow1, @shadow2, @shadow3, @shadow4; 
	   -moz-box-shadow: @shadow1, @shadow2, @shadow3, @shadow4;
	        box-shadow: @shadow1, @shadow2, @shadow3, @shadow4;
}
.box-shadow(@shadow1, @shadow2, @shadow3, @shadow4, @shadow5) {
	-webkit-box-shadow: @shadow1, @shadow2, @shadow3, @shadow4, @shadow5; 
	   -moz-box-shadow: @shadow1, @shadow2, @shadow3, @shadow4, @shadow5;
	        box-shadow: @shadow1, @shadow2, @shadow3, @shadow4, @shadow5;
}

.columns(@count: 3, @gap: 12px){
	.column-count(@count);
	.column-gap(@gap);
}
.column-count(@count: 3){
	-webkit-column-count: @count;
	   -moz-column-count: @count;
	        column-count: @count;
}
.column-gap(@gap: 12px){
	-webkit-column-gap: @gap;
	   -moz-column-gap: @gap;
	        column-gap: @gap;
}
.column-width(@columnWidth){
	-webkit-column-width: @columnWidth;
	   -moz-column-width: @columnWidth;
	        column-width: @columnWidth;
}
.column-span(@columnSpan: all){
	-webkit-column-span: @columnSpan;
	   -moz-column-span: @columnSpan;
	        column-span: @columnSpan;
}

/**
* Common effects library
*/
@shadow: rgba(0, 0, 0, 40%);
.effects {
	.gloss(@mainColor: rgba(255,255,255,1), @height: 2em) {
		.box-shadow( 
	    	inset 0px (@height) (@height) fade(@mainColor, 20%),
			inset 0px (@height/4) (@height/6) fade(lighten(@mainColor, 20%), 20%),
			inset 0px -(@height/2) (@height) fade(darken(@mainColor, 20%), 20%)
		); 
	}
	
	.dropShadow {
		.dropShadow(@shadow);
	}
	.dropShadow(@shadow) {
		.box-shadow(4px 4px 4px @shadow);
	}
	.outerGlow(@color){ // untested
		.box-shadow(@color 0 0 .15em 0.06em);
	}
	
	
	&.text {
		.glow(@colour){
			.effects.text .glow(@colour, @colour);
		}
		.glow(@colour, @colour2){
			text-shadow: 0 0 0.1em @colour2, 0 0 0.2em @colour2, 0 0 0.3em @colour, 0 0 0.4em @colour; 
		}
     }
}

.background() {
	&.gradient {
		&.linear {
			.vertical(@colour){
				.vertical(darken(@colour, 10%), lighten(@colour, 10%));
			}
			.vertical(@fromColor, @toColor){
				background-colour: @fromColor;
				filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)", @fromColor, @toColor) );
				background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(@fromColor), to(@toColor)); 
				background: -webkit-linear-gradient(top, @fromColor, @toColor); 
				background: -khtml-gradient(linear, left top, left bottom, from(@fromColor), to(@toColor));
				background: -moz-linear-gradient(top, @fromColor, @toColor); 
				background: -ms-linear-gradient(top, @fromColor, @toColor);
				background: -o-linear-gradient(top, @fromColor, @toColor);
				background: linear-gradient(top, @fromColor, @toColor);
			}
			.horizontal(@colour){
				.horizontal(darken(@colour, 10%), lighten(@colour, 10%));
			}
			.horizontal(@fromColor, @toColor){
				background-colour: @fromColor;
				background: -webkit-gradient(linear, 0% 0%, 100% 0%, from(@fromColor), to(@toColor)); 
				background: -webkit-linear-gradient(left, @fromColor, @toColor); 
				background: -moz-linear-gradient(left, @fromColor, @toColor); 
				background: -ms-linear-gradient(left, @fromColor, @toColor); 
				background: -o-linear-gradient(left, @fromColor, @toColor);
				background: linear-gradient(left, @fromColor, @toColor);
			}
		}
		.radial(@fromColour){
			.radial(@fromColour, darken(@fromColour, 20%));
		}
		.radial(@fromColour, @toColour){
			.radial(@fromColour, @toColour, 50%, 50%);
		}
		.radial(@fromColour, @toColour, @urlComponent){
			.radial(@fromColour, @toColour, 50%, 50%, @urlComponent);
		}
		.radial(@fromColour, @toColour, @x, @y){
			background-color: @fromColour;
			background-image: -moz-radial-gradient(@x @y, ellipse closest-side, @fromColour, @toColour 100%);
			background-image: -webkit-radial-gradient(@x @y, ellipse closest-side, @fromColour, @toColour 100%);
			background-image: -o-radial-gradient(@x @y, ellipse closest-side, @fromColour, @toColour 100%);
			background-image: -ms-radial-gradient(@x @y, ellipse closest-side, @fromColour, @toColour 100%);
			background-image: radial-gradient(@x @y, ellipse closest-side, @fromColour, @toColour 100%);
		}
		.radial(@fromColour, @toColour, @x, @y, @url){
			background-color: @fromColour;
			background-image: @url, -moz-radial-gradient(@x @y, ellipse closest-side, @fromColour, @toColour 100%);
			background-image: @url, -webkit-radial-gradient(@x @y, ellipse closest-side, @fromColour, @toColour 100%);
			background-image: @url, -o-radial-gradient(@x @y, ellipse closest-side, @fromColour, @toColour 100%);
			background-image: @url, -ms-radial-gradient(@x @y, ellipse closest-side, @fromColour, @toColour 100%);
			background-image: @url, radial-gradient(@x @y, ellipse closest-side, @fromColour, @toColour 100%);
		}
	}
	.neutral(@backgroundColour) {
		.radial(@backgroundColour, darken(@backgroundColour, 20%), 50%, 65%);
	}
}