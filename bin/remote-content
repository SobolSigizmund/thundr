#!/bin/sh

if [ $# -eq 0 ]; then
	set -- -h
fi

OPTS_SPEC="\
remote-content register <module_name> <remote_url> <branch>
remote-content pull <module_name> <branch>
--

h,help 	show the help
"
eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"


# Setup the enviroment
PATH=$PATH:$(git --exec-path)

. git-sh-setup

# only work when we have subtree installed
if [ "$(hash git-subtree &>/dev/null && echo OK)" = "" ]
then
	die "To manage remote content we need git-subtree; install git subtree (google is your best friend) or upgrade git to >=1.7.11"
fi

LOCAL_PATH="content/modules/"
REMOTE_NAME=
REMOTE_URL=
REMOTE_BRANCH=

remote_content_main()
{
	# parse out the options first
	while [ $# -gt 0 ]; do
		opt="$1"
		shift

		case "$opt" in
			--) break ;;
			*) die "Unexpected option: $opt" ;;
		esac
	done

	COMMAND="$1"
	shift

	case "$COMMAND" in
		register)
			# make sure we have the name for the module, the repo url and the branch
			if [ $# -lt 1 ]; then die "To register remote content you need to name the remote module"; fi
			if [ $# -lt 2 ]; then die "To register remote content the url to the remote to pull from is required"; fi
			
			REMOTE_NAME="$1"
			REMOTE_URL="$2"
			
			shift 2

			cmd_register ;;

		pull)
			if [ $# -lt 1 ]; then die "Specify the module you wish the pull updates for"; fi
			#if [ $# -lt 2 ]; then die "To register remote content the remote branch to pull from is required"; fi

			REMOTE_NAME="$1"
			REMOTE_BRANCH="$2"

			shift 3
			
			cmd_pull ;;

		*) die "Unknown command" ;;
	esac

}

say() {
	echo "$@" >&2
}

cmd_register() {
	say "Registering content module '${REMOTE_NAME}'"

	if ! git remote | grep "^content/${REMOTE_NAME}$" > /dev/null; then
		git remote add "content/${REMOTE_NAME}" "${REMOTE_URL}"
	fi

	if git subtree add --prefix="content/modules/${REMOTE_NAME}" "$REMOTE_URL"; then
		say "Registered the content module '${REMOTE_NAME}'"
	else
		say "Couldn't register the module '${REMOTE_NAME}'"
	fi
}

cmd_pull() {
	say "Pulling updates for module '${REMOTE_NAME}'"

	LOCAL_PATH="${LOCAL_PATH}${REMOTE_NAME}"
	REMOTE="content/${REMOTE_NAME}"

	if git subtree pull --prefix="$LOCAL_PATH" $REMOTE --message="Pulled latest from content module '${REMOTE_NAME}'"; then
		say "Pulled the latest changes for '${REMOTE_NAME}"
	else
		say "Could not pull the latest changs"
	fi
}

remote_content_main "$@"